"------------------------
" プラグインのロードと設定
"------------------------

set nocompatible
filetype off

" Vundle
set rtp+=~/.vim/vundle/
call vundle#rc()
filetype plugin on
 
Bundle 'Shougo/neocomplcache'
Bundle 'Shougo/unite.vim'
Bundle 'Shougo/neomru.vim'
Bundle "git://github.com/Shougo/vimproc" 
Bundle 'snipMate'
Bundle 'thinca/vim-quickrun'
Bundle 'thinca/vim-fontzoom'
Bundle 'hokaccha/vim-html5validator'
Bundle 'hokaccha/vim-css3-syntax'
Bundle 'jade.vim'
Bundle 'groenewege/vim-less'
Bundle 'kchmck/vim-coffee-script'
Bundle 'scrooloose/syntastic'
Bundle 'wavded/vim-stylus'
Bundle 'maksimr/vim-jsbeautify'
Bundle 'gcmt/wildfire.vim'
Bundle 'nginx.vim'

" wildfire
let g:wildfire_objects = ["ic", "i'", 'i"', 'i)', 'i]', 'i}', 'ip', 'it', 'i>']

" jsbeautify
vnoremap <silent> ff :call RangeJsBeautify()<CR>

" syntastic
let g:syntastic_mode_map = { 'mode': 'active',
  \ 'active_filetypes': [],
  \ 'passive_filetypes': ['scss', 'html'] }
"let g:syntastic_auto_loc_list = 1
let g:syntastic_javascript_checkers = ['jshint']

" quickrun
nmap ,r <Plug>(quickrun)
vmap ,r <Plug>(quickrun)

if !exists("g:quickrun_config")
    let g:quickrun_config={}
endif

let g:quickrun_config['_'] = {
    \ 'outputter/buffer/split' : '%{winwidth(0) * 2 < winheight(0) * 5 ? "" : "vertical belowright"}',
\ }

let g:quickrun_config['markdown'] = {
    \ 'command': 'marked',
\ }

let g:quickrun_config['ruby'] = {
    \ 'command' : $HOME.'/.rbenv/shims/ruby'
\ }

" snipmate
let g:snippets_dir = $HOME.'/.vim/snippets'

" unite
let g:unite_enable_start_insert = 1
let g:unite_update_time = 100
let g:unite_enable_ignore_case = 1
let g:unite_enable_smart_case = 1
let g:unite_source_file_mru_limit = 100

nnoremap <silent> <Space>kf :<C-u>UniteWithBufferDir -buffer-name=files file file/new<CR>
nnoremap <silent> <Space>km :<C-u>Unite file_mru<CR>
nnoremap <silent> <Space>kr :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> <Space>kg :<C-u>Unite grep:. -buffer-name=search-buffer<CR>

autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
  imap <buffer> <C-w> <Plug>(unite_delete_backward_path)
  imap <buffer> <C-c> <Esc><Plug>(unite_all_exit)
  imap <buffer> <C-y> <Plug>(unite_do_default_action)
  nmap <buffer> <C-c> <Plug>(unite_all_exit)
  inoremap <silent> <buffer> <expr> <C-o><C-n> unite#do_action('tabopen')
  inoremap <silent> <buffer> <expr> <C-o><C-j> unite#do_action('below')
  inoremap <silent> <buffer> <expr> <C-o><C-k> unite#do_action('above')
  inoremap <silent> <buffer> <expr> <C-o><C-h> unite#do_action('left')
  inoremap <silent> <buffer> <expr> <C-o><C-l> unite#do_action('right')
  inoremap <silent> <buffer> ~ <C-u>~
endfunction

" unite grep に ag(The Silver Searcher) を使う
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif

" neocon
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_enable_auto_select = 1
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" https://github.com/Shougo/neocomplcache.vim/issues/463
call neocomplcache#custom_source('_', 'converters', ['converter_remove_next_keyword', 'converter_delimiter', 'converter_abbr'])

inoremap <expr><C-g> neocomplcache#undo_completion()
inoremap <expr><C-l> neocomplcache#complete_common_string()
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS>  neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y> neocomplcache#close_popup()
inoremap <expr><C-e> neocomplcache#cancel_popup()
inoremap <C-k> <Esc>a<C-n>

